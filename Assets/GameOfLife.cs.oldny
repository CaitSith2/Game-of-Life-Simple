using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Linq;
using Newtonsoft.Json;

public class GameOfLife : MonoBehaviour {

	//1. starta med att (initsetup) randomiserar ut ett värde för alla B. Av 48 knappar bör ca 20 få färg så oddsen bör vara 28/48 svart, 20/48 vit. av vit bör ca 2/5(8/48) bli färgade (random).
	//2. överför B:s value till en statisk array (InitValue).
	//3. räkna ut lösningen - randomisera antalet generationer, uppdatera displayen. Räkna ut lösningen och lagra den i array (SubmitValue).
	//4. uppdatera meshes via en metod.
	//5. aktivera modulen.

	//B.oninteract: byt value (F->B->W->B->W...). uppdatera mesh.
	//Submit.oninteract: kolla BtnValue[alla] mot SolveValue[alla] - vid olika, strike och return. vid lika, pass.
	//Reset.oninteract: överför InitValue till BtnValue. kör metod för uppdatera meshes.

	public KMBombInfo Info;
	public KMBombModule Module;
	public KMAudio Audio;

	public KMSelectable[] Btn;
	public KMSelectable Submit;
	public KMSelectable Reset;
	public MeshRenderer[] BtnColor;
	public TextMesh DisplayText;
	public Color32[] Colors;

	private int[] BtnColor1init = new int[48];
	private int[] BtnColor2init = new int[48];
	private int[] BtnColor1 = new int[48];
	private int[] BtnColor2 = new int[48];
	private int[] nCount = new int[48];
	private int Gen;
	private Color32[] ColorsSubmitted = new Color32[48];
	private Color32[] BtnColorStore = new Color32[48];

	// Settings
	// This many squares (of 48), at average, will be these colors:
	private int BlackAmount = 30;
	private int WhiteAmount = 12;
	private int ColorAmount = 6;
	private float TimeFlash = 0.5f;		// time between flashes
	private float TimeSuspend = 8.8f;	// time between generation when submitting
	private float TimeSneak = 5.4f;		// time the correct solution is displayed at a strike
	private int GenRange = 4;			// maximum number of generations




	string iiSerial;
	int iiLast;
	int iiFirst;
	int iiSum;
	int iiStrikes;
	int iiBatteries;
	int iiBatteryHolders;
	int iiLit;
	int iiUnlit;
	int iiPorts;
	int iiPortTypes;
	int iiModules;
	int iiSolved;
	int iiRs;

	private bool isActive = false;
	private bool isSolved = false;
	private bool isSubmitting = false;

	private static int moduleIdCounter = 1;
	private int moduleId = 0;


	// Loading screen
	void Start () {

		moduleId = moduleIdCounter++;
		Module.OnActivate += Activate;
	}


	// Lights off
	void Awake () {

		InitSetup ();

		Reset.OnInteract += delegate () {
			Audio.PlayGameSoundAtTransform (KMSoundOverride.SoundEffect.ButtonPress, Reset.transform);
			Reset.AddInteractionPunch ();
			handleReset ();
			return false;
		};

		Submit.OnInteract += delegate () {
			if (!isActive || isSolved || isSubmitting) {

			} else {
			StartCoroutine(handleSubmit());
			}
			return false;
		};



		for (int i = 0; i < 48; i++)
		{
			int j = i;
			Btn[i].OnInteract += delegate () {
				handleSquare (j);
				return false;
			};
		}
	}


	// Lights on
	void Activate () {

		isActive = true;
		//iiSerial = Info.GetSerialNumber ();
		iiLast = Info.GetSerialNumberNumbers ().Last ();
		//iiFirst = Info.GetSerialNumberNumbers ().First ();
		//iiSum = Info.GetSerialNumberNumbers ().Sum ();
		iiBatteries = Info.GetBatteryCount ();
		//iiBatteryHolders = Info.GetBatteryHolderCount ();
		iiLit = Info.GetOnIndicators ().Count ();
		iiUnlit = Info.GetOffIndicators ().Count ();
		//iiPorts = Info.GetPortCount ();
		iiPortTypes = Info.GetPorts ().Distinct ().Count ();
		//iiModules = Info.GetModuleNames ().Count ();
		//string indc = String.Join ("", Info.GetIndicators ().ToArray ());
		//iiRs = (indc.Count ("R".Contains));

	}


	// Initial setup
	void InitSetup () {

		Gen = Random.Range (2, (GenRange + 1));
		DisplayText.text = Gen.ToString ();

		for (int i = 0; i < 48; i++)
		{
			// radomizing starting squares
			int x = Random.Range (0, 48);
			if (x < BlackAmount) {		// black, black
				BtnColor1init [i] = 0;
				BtnColor2init [i] = 0;
				BtnColor1 [i] = 0;
				BtnColor2 [i] = 0;
			} else {
				if (x < (BlackAmount + WhiteAmount)) {		// white, white
					BtnColor1init [i] = 1;
					BtnColor2init [i] = 1;
					BtnColor1 [i] = 1;
					BtnColor2 [i] = 1;
				} else {									// others randomized
					BtnColor1init [i] = Random.Range (0, 9);
					if (BtnColor1init [i] == 1)
						BtnColor1init [i] = 0;
					BtnColor2init [i] = Random.Range (0, 9);
					if (BtnColor2init [i] == 1)
						BtnColor2init [i] = 0;
					BtnColor1 [i] = BtnColor1init [i];
					BtnColor2 [i] = BtnColor2init [i];
				}
			}
		}
		StartCoroutine(updateSquares());
	}


	// Update the squares to correct colors
	private IEnumerator updateSquares () {

		if (!isActive || isSolved || isSubmitting) {		// check if module is solved, inactive or submitting. if yes, then wait.
			yield return new WaitForSeconds (TimeFlash);
			StartCoroutine(updateSquares());
		}
		else {
			for (int i = 0; i < 48; i++) {
				int j = i;
				if (BtnColor1 [i] == 0 && BtnColor2 [i] == 0) {					// if both are black
					BtnColor [j].material.color = Colors [BtnColor1 [j]];
				} else {
					if (BtnColor1 [i] == 1 && BtnColor2 [i] == 1) {					// if both are white
						BtnColor [j].material.color = Colors [BtnColor1 [j]];
					} else {															// all other cases
						if (BtnColor [i].material.color == Colors [BtnColor1 [i]]) {
							BtnColor [j].material.color = Colors [BtnColor2 [j]];
						} else {
							BtnColor [j].material.color = Colors [BtnColor1 [j]];
						}
					}
				}
			}
			yield return new WaitForSeconds (TimeFlash);
			StartCoroutine(updateSquares());
		}
	}



	// Submit is pressed, calculate solution and compare to BtnValue
	//void handleSubmit () {
	private IEnumerator handleSubmit () {
		
		Audio.PlayGameSoundAtTransform (KMSoundOverride.SoundEffect.ButtonPress, Submit.transform);
		Submit.AddInteractionPunch ();

			//isSubmitting = true;
		isSubmitting = true;

			// BOB-rule


			//store the present values in ColorsSubmitted
		for (int i = 0; i < 48; i++) {
			ColorsSubmitted [i] = BtnColor [i].material.color;
		}
			
			//run a reset
		for (int i = 0; i < 48; i++) {
			BtnColor1 [i] = BtnColor1init [i];
			BtnColor2 [i] = BtnColor2init [i];
			for (int k = 0; k < 48; k++) {
				int j = k;
				if (BtnColor1 [k] == 0 && BtnColor2 [k] == 0) {					// if both are black
					BtnColor [j].material.color = Colors [BtnColor1 [j]];
				} else {
					if (BtnColor1 [k] == 1 && BtnColor2 [k] == 1) {					// if both are white
						BtnColor [j].material.color = Colors [BtnColor1 [j]];
					} else {															// all other cases
						if (BtnColor [k].material.color == Colors [BtnColor1 [k]]) {
							BtnColor [j].material.color = Colors [BtnColor2 [j]];
						} else {
							BtnColor [j].material.color = Colors [BtnColor1 [j]];
						}
					}
				}
			}
		}
		Debug.Log ("Reset");
		yield return new WaitForSeconds (3);
			
			//transform colored squares to black/white
		for (int i = 0; i < 48; i++) {
			int j = i;
			if ((BtnColor1 [i] == 0 && BtnColor2 [i] == 0) || (BtnColor1 [i] == 1 && BtnColor2 [i] == 1)) {

			} else {
				if ((BtnColor1 [i] == 0 && BtnColor2 [i] == 2) || (BtnColor1 [i] == 2 && BtnColor2 [i] == 0)) {		// black+red
					//input rules
					iiStrikes = Info.GetStrikes ();
					if (iiStrikes > 0 && iiBatteries != 0) {
						BtnColor [j].material.color = Colors [0];
						BtnColor1 [j] = 0;
						BtnColor2 [j] = 0;
						Debug.Log ("[Game of Life #" + moduleId + "] Flashing red = Black");
					} else {
						BtnColor [j].material.color = Colors [1];
						BtnColor1 [j] = 1;
						BtnColor2 [j] = 1;
						Debug.Log ("[Game of Life #" + moduleId + "] Flashing red = White");
					}
				} else {
					if ((BtnColor1 [i] == 0 && BtnColor2 [i] == 3) || (BtnColor1 [i] == 3 && BtnColor2 [i] == 0)) {		// black+orange
						//input rules
						iiStrikes = Info.GetStrikes ();
						if (iiStrikes == 0 && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.CAR)) {
							BtnColor [j].material.color = Colors [0];
							BtnColor1 [j] = 0;
							BtnColor2 [j] = 0;
							Debug.Log ("[Game of Life #" + moduleId + "] Flashing orange = Black");
						} else {
							BtnColor [j].material.color = Colors [1];
							BtnColor1 [j] = 1;
							BtnColor2 [j] = 1;
							Debug.Log ("[Game of Life #" + moduleId + "] Flashing orange = White");
						}
					} else {
						if ((BtnColor1 [i] == 0 && BtnColor2 [i] == 4) || (BtnColor1 [i] == 4 && BtnColor2 [i] == 0)) {		// black+yellow
							//input rules
							if ((iiLit > iiUnlit) && !Info.IsPortPresent(KMBombInfoExtensions.KnownPortType.RJ45)) {
								BtnColor [j].material.color = Colors [0];
								BtnColor1 [j] = 0;
								BtnColor2 [j] = 0;
								Debug.Log ("[Game of Life #" + moduleId + "] Flashing yellow = Black");
							} else {
								BtnColor [j].material.color = Colors [1];
								BtnColor1 [j] = 1;
								BtnColor2 [j] = 1;
								Debug.Log ("[Game of Life #" + moduleId + "] Flashing yellow = White");
							}
						} else {
							if ((BtnColor1 [i] == 0 && BtnColor2 [i] == 5) || (BtnColor1 [i] == 5 && BtnColor2 [i] == 0)) {		// black+green
								//input rules
								iiSolved = Info.GetSolvedModuleNames ().Count ();
								if ((iiSolved %2 == 0) && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.CLR)) {
									BtnColor [j].material.color = Colors [0];
									BtnColor1 [j] = 0;
									BtnColor2 [j] = 0;
									Debug.Log ("[Game of Life #" + moduleId + "] Flashing green = Black");
								} else {
									BtnColor [j].material.color = Colors [1];
									BtnColor1 [j] = 1;
									BtnColor2 [j] = 1;
									Debug.Log ("[Game of Life #" + moduleId + "] Flashing green = White");
								}
							} else {
								if ((BtnColor1 [i] == 0 && BtnColor2 [i] == 6) || (BtnColor1 [i] == 6 && BtnColor2 [i] == 0)) {		// black+blue
									//input rules
									if ((Info.IsPortPresent(KMBombInfoExtensions.KnownPortType.Serial) || Info.IsPortPresent(KMBombInfoExtensions.KnownPortType.PS2)) && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.SND)) {
										BtnColor [j].material.color = Colors [0];
										BtnColor1 [j] = 0;
										BtnColor2 [j] = 0;
										Debug.Log ("[Game of Life #" + moduleId + "] Flashing blue = Black");
									} else {
										BtnColor [j].material.color = Colors [1];
										BtnColor1 [j] = 1;
										BtnColor2 [j] = 1;
										Debug.Log ("[Game of Life #" + moduleId + "] Flashing blue = White");
									}
								} else {
									if ((BtnColor1 [i] == 0 && BtnColor2 [i] == 7) || (BtnColor1 [i] == 7 && BtnColor2 [i] == 0)) {		// black+purple
										//input rules
										if ((iiLit > iiUnlit) && (iiBatteries < 4)) {
											BtnColor [j].material.color = Colors [0];
											BtnColor1 [j] = 0;
											BtnColor2 [j] = 0;
											Debug.Log ("[Game of Life #" + moduleId + "] Flashing purple = Black");
										} else {
											BtnColor [j].material.color = Colors [1];
											BtnColor1 [j] = 1;
											BtnColor2 [j] = 1;
											Debug.Log ("[Game of Life #" + moduleId + "] Flashing purple = White");
										}
									} else {
										if ((BtnColor1 [i] == 0 && BtnColor2 [i] == 8) || (BtnColor1 [i] == 8 && BtnColor2 [i] == 0)) {		// black+brown
											//input rules
											if ((iiPortTypes > 2) && ((iiLit + iiUnlit) > 0)) {
												BtnColor [j].material.color = Colors [0];
												BtnColor1 [j] = 0;
												BtnColor2 [j] = 0;
												Debug.Log ("[Game of Life #" + moduleId + "] Flashing brown = Black");
											} else {
												BtnColor [j].material.color = Colors [1];
												BtnColor1 [j] = 1;
												BtnColor2 [j] = 1;
												Debug.Log ("[Game of Life #" + moduleId + "] Flashing brown = White");
											}
										} else {



											if ((BtnColor1 [i] == 2 && BtnColor2 [i] == 2) || (BtnColor1 [i] == 2 && BtnColor2 [i] == 2)) {		// red
												//input rules
												iiStrikes = Info.GetStrikes ();
												if (iiStrikes > 0 && iiBatteries != 0) {
													BtnColor [j].material.color = Colors [1];
													BtnColor1 [j] = 1;
													BtnColor2 [j] = 1;
													Debug.Log ("[Game of Life #" + moduleId + "] Steady red = White");
												} else {
													BtnColor [j].material.color = Colors [0];
													BtnColor1 [j] = 0;
													BtnColor2 [j] = 0;
													Debug.Log ("[Game of Life #" + moduleId + "] Steady red = Black");
												}
											} else {
												if ((BtnColor1 [i] == 2 && BtnColor2 [i] == 3) || (BtnColor1 [i] == 3 && BtnColor2 [i] == 2)) {		// red+orange
													//input rules
													iiStrikes = Info.GetStrikes ();
													if (iiStrikes > 0 && iiBatteries != 0) {
														BtnColor [j].material.color = Colors [1];
														BtnColor1 [j] = 1;
														BtnColor2 [j] = 1;
														Debug.Log ("[Game of Life #" + moduleId + "] Flashing red+orange = White");
													} else {
														BtnColor [j].material.color = Colors [0];
														BtnColor1 [j] = 0;
														BtnColor2 [j] = 0;
														Debug.Log ("[Game of Life #" + moduleId + "] Flashing red+orange = Black");
													}
												} else {
													if ((BtnColor1 [i] == 2 && BtnColor2 [i] == 4) || (BtnColor1 [i] == 4 && BtnColor2 [i] == 2)) {		// red+yellow
														//input rules
														iiStrikes = Info.GetStrikes ();
														if (iiStrikes == 0 && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.CAR)) {
															BtnColor [j].material.color = Colors [1];
															BtnColor1 [j] = 1;
															BtnColor2 [j] = 1;
															Debug.Log ("[Game of Life #" + moduleId + "] Flashing red+yellow = White");
														} else {
															BtnColor [j].material.color = Colors [0];
															BtnColor1 [j] = 0;
															BtnColor2 [j] = 0;
															Debug.Log ("[Game of Life #" + moduleId + "] Flashing red+yellow = Black");
														}
													} else {
														if ((BtnColor1 [i] == 2 && BtnColor2 [i] == 5) || (BtnColor1 [i] == 5 && BtnColor2 [i] == 2)) {		// red+green
															//input rules
															iiSolved = Info.GetSolvedModuleNames ().Count ();
															if ((iiSolved %2 == 0) && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.CLR)) {
																BtnColor [j].material.color = Colors [1];
																BtnColor1 [j] = 1;
																BtnColor2 [j] = 1;
																Debug.Log ("[Game of Life #" + moduleId + "] Flashing red+green = White");
															} else {
																BtnColor [j].material.color = Colors [0];
																BtnColor1 [j] = 0;
																BtnColor2 [j] = 0;
																Debug.Log ("[Game of Life #" + moduleId + "] Flashing red+green = Black");
															}
														} else {
															if ((BtnColor1 [i] == 2 && BtnColor2 [i] == 6) || (BtnColor1 [i] == 6 && BtnColor2 [i] == 2)) {		// red+blue
																//input rules
																if ((iiLit > iiUnlit) && (iiBatteries < 4)) {
																	BtnColor [j].material.color = Colors [1];
																	BtnColor1 [j] = 1;
																	BtnColor2 [j] = 1;
																	Debug.Log ("[Game of Life #" + moduleId + "] Flashing red+blue = White");
																} else {
																	BtnColor [j].material.color = Colors [0];
																	BtnColor1 [j] = 0;
																	BtnColor2 [j] = 0;
																	Debug.Log ("[Game of Life #" + moduleId + "] Flashing red+blue = Black");
																}
															} else {
																if ((BtnColor1 [i] == 2 && BtnColor2 [i] == 7) || (BtnColor1 [i] == 7 && BtnColor2 [i] == 2)) {		// red+purple
																	//input rules
																	if ((iiLit > iiUnlit) && (iiBatteries < 4)) {
																		BtnColor [j].material.color = Colors [1];
																		BtnColor1 [j] = 1;
																		BtnColor2 [j] = 1;
																		Debug.Log ("[Game of Life #" + moduleId + "] Flashing red+purple = White");
																	} else {
																		BtnColor [j].material.color = Colors [0];
																		BtnColor1 [j] = 0;
																		BtnColor2 [j] = 0;
																		Debug.Log ("[Game of Life #" + moduleId + "] Flashing red+purple = Black");
																	}
																} else {
																	if ((BtnColor1 [i] == 2 && BtnColor2 [i] == 8) || (BtnColor1 [i] == 8 && BtnColor2 [i] == 2)) {		// red+brown
																		//input rules
																		if (iiLast %2 == 0) {
																			//brown rule
																			if ((iiPortTypes > 2) && ((iiLit + iiUnlit) > 0)) {
																				BtnColor [j].material.color = Colors [1];
																				BtnColor1 [j] = 1;
																				BtnColor2 [j] = 1;
																				Debug.Log ("[Game of Life #" + moduleId + "] Flashing red+brown = White (brown rule)");
																			} else {
																				BtnColor [j].material.color = Colors [0];
																				BtnColor1 [j] = 0;
																				BtnColor2 [j] = 0;
																				Debug.Log ("[Game of Life #" + moduleId + "] Flashing red+brown = Black (brown rule)");
																			}
																		} else {
																			//other rule
																			iiStrikes = Info.GetStrikes ();
																			if (iiStrikes > 0 && iiBatteries != 0) {
																				BtnColor [j].material.color = Colors [1];
																				BtnColor1 [j] = 1;
																				BtnColor2 [j] = 1;
																				Debug.Log ("[Game of Life #" + moduleId + "] Flashing red+brown = White (red rule)");
																			} else {
																				BtnColor [j].material.color = Colors [0];
																				BtnColor1 [j] = 0;
																				BtnColor2 [j] = 0;
																				Debug.Log ("[Game of Life #" + moduleId + "] Flashing red+brown = Black (red rule)");
																			}
																		}
																	} else {



																		if ((BtnColor1 [i] == 3 && BtnColor2 [i] == 3) || (BtnColor1 [i] == 3 && BtnColor2 [i] == 3)) {		// orange
																			//input rules
																			iiStrikes = Info.GetStrikes ();
																			if (iiStrikes == 0 && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.CAR)) {
																				BtnColor [j].material.color = Colors [1];
																				BtnColor1 [j] = 1;
																				BtnColor2 [j] = 1;
																				Debug.Log ("[Game of Life #" + moduleId + "] Steady orange = White");
																			} else {
																				BtnColor [j].material.color = Colors [0];
																				BtnColor1 [j] = 0;
																				BtnColor2 [j] = 0;
																				Debug.Log ("[Game of Life #" + moduleId + "] Steady orange = Black");
																			}
																		} else {
																			if ((BtnColor1 [i] == 3 && BtnColor2 [i] == 4) || (BtnColor1 [i] == 4 && BtnColor2 [i] == 3)) {		// orange+yellow
																				//input rules
																				if ((iiLit > iiUnlit) && !Info.IsPortPresent(KMBombInfoExtensions.KnownPortType.RJ45)) {
																					BtnColor [j].material.color = Colors [1];
																					BtnColor1 [j] = 1;
																					BtnColor2 [j] = 1;
																					Debug.Log ("[Game of Life #" + moduleId + "] Flashing orange+yellow = White");
																				} else {
																					BtnColor [j].material.color = Colors [0];
																					BtnColor1 [j] = 0;
																					BtnColor2 [j] = 0;
																					Debug.Log ("[Game of Life #" + moduleId + "] Flashing orange+yellow = Black");
																				}
																			} else {
																				if ((BtnColor1 [i] == 3 && BtnColor2 [i] == 5) || (BtnColor1 [i] == 5 && BtnColor2 [i] == 3)) {		// orange+green
																					//input rules
																					if ((iiLit > iiUnlit) && !Info.IsPortPresent(KMBombInfoExtensions.KnownPortType.RJ45)) {
																						BtnColor [j].material.color = Colors [1];
																						BtnColor1 [j] = 1;
																						BtnColor2 [j] = 1;
																						Debug.Log ("[Game of Life #" + moduleId + "] Flashing orange+green = White");
																					} else {
																						BtnColor [j].material.color = Colors [0];
																						BtnColor1 [j] = 0;
																						BtnColor2 [j] = 0;
																						Debug.Log ("[Game of Life #" + moduleId + "] Flashing orange+green = Black");
																					}
																				} else {
																					if ((BtnColor1 [i] == 3 && BtnColor2 [i] == 6) || (BtnColor1 [i] == 6 && BtnColor2 [i] == 3)) {		// orange+blue
																						//input rules
																						iiStrikes = Info.GetStrikes ();
																						if (iiStrikes == 0 && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.CAR)) {
																							BtnColor [j].material.color = Colors [1];
																							BtnColor1 [j] = 1;
																							BtnColor2 [j] = 1;
																							Debug.Log ("[Game of Life #" + moduleId + "] Flashing orange+blue = White");
																						} else {
																							BtnColor [j].material.color = Colors [0];
																							BtnColor1 [j] = 0;
																							BtnColor2 [j] = 0;
																							Debug.Log ("[Game of Life #" + moduleId + "] Flashing orange+blue = Black");
																						}
																					} else {
																						if ((BtnColor1 [i] == 3 && BtnColor2 [i] == 7) || (BtnColor1 [i] == 7 && BtnColor2 [i] == 3)) {		// orange+purple
																							//input rules
																							iiStrikes = Info.GetStrikes ();
																							if (iiStrikes > 0 && iiBatteries != 0) {
																								BtnColor [j].material.color = Colors [1];
																								BtnColor1 [j] = 1;
																								BtnColor2 [j] = 1;
																								Debug.Log ("[Game of Life #" + moduleId + "] Flashing orange+purple = White");
																							} else {
																								BtnColor [j].material.color = Colors [0];
																								BtnColor1 [j] = 0;
																								BtnColor2 [j] = 0;
																								Debug.Log ("[Game of Life #" + moduleId + "] Flashing orange+purple = Black");
																							}
																						} else {
																							if ((BtnColor1 [i] == 3 && BtnColor2 [i] == 8) || (BtnColor1 [i] == 8 && BtnColor2 [i] == 3)) {		// orange+brown
																								//input rules
																								if (iiLast %2 == 0) {
																									//brown rule
																									if ((iiPortTypes > 2) && ((iiLit + iiUnlit) > 0)) {
																										BtnColor [j].material.color = Colors [1];
																										BtnColor1 [j] = 1;
																										BtnColor2 [j] = 1;
																										Debug.Log ("[Game of Life #" + moduleId + "] Flashing orange+brown = White (brown rule)");
																									} else {
																										BtnColor [j].material.color = Colors [0];
																										BtnColor1 [j] = 0;
																										BtnColor2 [j] = 0;
																										Debug.Log ("[Game of Life #" + moduleId + "] Flashing orange+brown = Black (brown rule)");
																									}
																								} else {
																									//other rule
																									iiStrikes = Info.GetStrikes ();
																									if (iiStrikes == 0 && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.CAR)) {
																										BtnColor [j].material.color = Colors [1];
																										BtnColor1 [j] = 1;
																										BtnColor2 [j] = 1;
																										Debug.Log ("[Game of Life #" + moduleId + "] Flashing orange+brown = White (orange rule)");
																									} else {
																										BtnColor [j].material.color = Colors [0];
																										BtnColor1 [j] = 0;
																										BtnColor2 [j] = 0;
																										Debug.Log ("[Game of Life #" + moduleId + "] Flashing orange+brown = Black (orange rule)");
																									}
																								}
																							} else {



																								if ((BtnColor1 [i] == 4 && BtnColor2 [i] == 4) || (BtnColor1 [i] == 4 && BtnColor2 [i] == 4)) {		// yellow
																									//input rules
																									if ((iiLit > iiUnlit) && !Info.IsPortPresent (KMBombInfoExtensions.KnownPortType.RJ45)) {
																										BtnColor [j].material.color = Colors [1];
																										BtnColor1 [j] = 1;
																										BtnColor2 [j] = 1;
																										Debug.Log ("[Game of Life #" + moduleId + "] Steady yellow = White");
																									} else {
																										BtnColor [j].material.color = Colors [0];
																										BtnColor1 [j] = 0;
																										BtnColor2 [j] = 0;
																										Debug.Log ("[Game of Life #" + moduleId + "] Steady yellow = Black");
																									}
																								} else {
																									if ((BtnColor1 [i] == 4 && BtnColor2 [i] == 5) || (BtnColor1 [i] == 5 && BtnColor2 [i] == 4)) {		// yellow+green
																										//input rules
																										if ((iiLit > iiUnlit) && !Info.IsPortPresent (KMBombInfoExtensions.KnownPortType.RJ45)) {
																											BtnColor [j].material.color = Colors [1];
																											BtnColor1 [j] = 1;
																											BtnColor2 [j] = 1;
																											Debug.Log ("[Game of Life #" + moduleId + "] Flashing yellow+green = White");
																										} else {
																											BtnColor [j].material.color = Colors [0];
																											BtnColor1 [j] = 0;
																											BtnColor2 [j] = 0;
																											Debug.Log ("[Game of Life #" + moduleId + "] Flashing yellow+green = Black");
																										}
																									} else {
																										if ((BtnColor1 [i] == 4 && BtnColor2 [i] == 6) || (BtnColor1 [i] == 6 && BtnColor2 [i] == 4)) {		// yellow+blue
																											//input rules
																											iiSolved = Info.GetSolvedModuleNames ().Count ();
																											if ((iiSolved %2 == 0) && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.CLR)) {
																												BtnColor [j].material.color = Colors [1];
																												BtnColor1 [j] = 1;
																												BtnColor2 [j] = 1;
																												Debug.Log ("[Game of Life #" + moduleId + "] Flashing yellow+blue = White");
																											} else {
																												BtnColor [j].material.color = Colors [0];
																												BtnColor1 [j] = 0;
																												BtnColor2 [j] = 0;
																												Debug.Log ("[Game of Life #" + moduleId + "] Flashing yellow+blue = Black");
																											}
																										} else {
																											if ((BtnColor1 [i] == 4 && BtnColor2 [i] == 7) || (BtnColor1 [i] == 7 && BtnColor2 [i] == 4)) {		// yellow+purple
																												//input rules
																												if ((iiLit > iiUnlit) && (iiBatteries < 4)) {
																													BtnColor [j].material.color = Colors [1];
																													BtnColor1 [j] = 1;
																													BtnColor2 [j] = 1;
																													Debug.Log ("[Game of Life #" + moduleId + "] Flashing yellow+purple = White");
																												} else {
																													BtnColor [j].material.color = Colors [0];
																													BtnColor1 [j] = 0;
																													BtnColor2 [j] = 0;
																													Debug.Log ("[Game of Life #" + moduleId + "] Flashing yellow+purple = Black");
																												}
																											} else {
																												if ((BtnColor1 [i] == 4 && BtnColor2 [i] == 8) || (BtnColor1 [i] == 8 && BtnColor2 [i] == 4)) {		// yellow+brown
																													//input rules
																													if (iiLast %2 == 0) {
																														//brown rule
																														if ((iiPortTypes > 2) && ((iiLit + iiUnlit) > 0)) {
																															BtnColor [j].material.color = Colors [1];
																															BtnColor1 [j] = 1;
																															BtnColor2 [j] = 1;
																															Debug.Log ("[Game of Life #" + moduleId + "] Flashing yellow+brown = White (brown rule)");
																														} else {
																															BtnColor [j].material.color = Colors [0];
																															BtnColor1 [j] = 0;
																															BtnColor2 [j] = 0;
																															Debug.Log ("[Game of Life #" + moduleId + "] Flashing yellow+brown = Black (brown rule)");
																														}
																													} else {
																														//other rule
																														if ((iiLit > iiUnlit) && !Info.IsPortPresent (KMBombInfoExtensions.KnownPortType.RJ45)) {
																															BtnColor [j].material.color = Colors [1];
																															BtnColor1 [j] = 1;
																															BtnColor2 [j] = 1;
																															Debug.Log ("[Game of Life #" + moduleId + "] Flashing yellow+brown = White (yellow rule)");
																														} else {
																															BtnColor [j].material.color = Colors [0];
																															BtnColor1 [j] = 0;
																															BtnColor2 [j] = 0;
																															Debug.Log ("[Game of Life #" + moduleId + "] Flashing yellow+brown = Black (yellow rule)");
																														}
																													}
																												} else {



																													if ((BtnColor1 [i] == 5 && BtnColor2 [i] == 5) || (BtnColor1 [i] == 5 && BtnColor2 [i] == 5)) {		// green
																														//input rules
																														iiSolved = Info.GetSolvedModuleNames ().Count ();
																														if ((iiSolved %2 == 0) && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.CLR)) {
																															BtnColor [j].material.color = Colors [1];
																															BtnColor1 [j] = 1;
																															BtnColor2 [j] = 1;
																															Debug.Log ("[Game of Life #" + moduleId + "] Steady green = White");
																														} else {
																															BtnColor [j].material.color = Colors [0];
																															BtnColor1 [j] = 0;
																															BtnColor2 [j] = 0;
																															Debug.Log ("[Game of Life #" + moduleId + "] Steady green = Black");
																														}
																													} else {
																														if ((BtnColor1 [i] == 5 && BtnColor2 [i] == 6) || (BtnColor1 [i] == 6 && BtnColor2 [i] == 5)) {		// green+blue
																															//input rules
																															if ((Info.IsPortPresent(KMBombInfoExtensions.KnownPortType.Serial) || Info.IsPortPresent(KMBombInfoExtensions.KnownPortType.PS2)) && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.SND)) {
																																BtnColor [j].material.color = Colors [1];
																																BtnColor1 [j] = 1;
																																BtnColor2 [j] = 1;
																																Debug.Log ("[Game of Life #" + moduleId + "] Flashing green+blue = White");
																															} else {
																																BtnColor [j].material.color = Colors [0];
																																BtnColor1 [j] = 0;
																																BtnColor2 [j] = 0;
																																Debug.Log ("[Game of Life #" + moduleId + "] Flashing green+blue = Black");
																															}
																														} else {
																															if ((BtnColor1 [i] == 5 && BtnColor2 [i] == 7) || (BtnColor1 [i] == 7 && BtnColor2 [i] == 5)) {		// green+purple
																																//input rules
																																if ((Info.IsPortPresent(KMBombInfoExtensions.KnownPortType.Serial) || Info.IsPortPresent(KMBombInfoExtensions.KnownPortType.PS2)) && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.SND)) {
																																	BtnColor [j].material.color = Colors [1];
																																	BtnColor1 [j] = 1;
																																	BtnColor2 [j] = 1;
																																	Debug.Log ("[Game of Life #" + moduleId + "] Flashing green+purple = White");
																																} else {
																																	BtnColor [j].material.color = Colors [0];
																																	BtnColor1 [j] = 0;
																																	BtnColor2 [j] = 0;
																																	Debug.Log ("[Game of Life #" + moduleId + "] Flashing green+purple = Black");
																																}
																															} else {
																																if ((BtnColor1 [i] == 5 && BtnColor2 [i] == 8) || (BtnColor1 [i] == 8 && BtnColor2 [i] == 5)) {		// green+brown
																																	//input rules
																																	if (iiLast %2 == 0) {
																																		//brown rule
																																		if ((iiPortTypes > 2) && ((iiLit + iiUnlit) > 0)) {
																																			BtnColor [j].material.color = Colors [1];
																																			BtnColor1 [j] = 1;
																																			BtnColor2 [j] = 1;
																																			Debug.Log ("[Game of Life #" + moduleId + "] Flashing green+brown = White (brown rule)");
																																		} else {
																																			BtnColor [j].material.color = Colors [0];
																																			BtnColor1 [j] = 0;
																																			BtnColor2 [j] = 0;
																																			Debug.Log ("[Game of Life #" + moduleId + "] Flashing green+brown = Black (brown rule)");
																																		}
																																	} else {
																																		//other rule
																																		iiSolved = Info.GetSolvedModuleNames ().Count ();
																																		if ((iiSolved %2 == 0) && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.CLR)) {
																																			BtnColor [j].material.color = Colors [1];
																																			BtnColor1 [j] = 1;
																																			BtnColor2 [j] = 1;
																																			Debug.Log ("[Game of Life #" + moduleId + "] Flashing green+brown = White (green rule)");
																																		} else {
																																			BtnColor [j].material.color = Colors [0];
																																			BtnColor1 [j] = 0;
																																			BtnColor2 [j] = 0;
																																			Debug.Log ("[Game of Life #" + moduleId + "] Flashing green+brown = Black (green rule)");
																																		}
																																	}
																																} else {



																																	if ((BtnColor1 [i] == 6 && BtnColor2 [i] == 6) || (BtnColor1 [i] == 6 && BtnColor2 [i] == 6)) {		// blue
																																		//input rules
																																		if ((Info.IsPortPresent(KMBombInfoExtensions.KnownPortType.Serial) || Info.IsPortPresent(KMBombInfoExtensions.KnownPortType.PS2)) && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.SND)) {
																																			BtnColor [j].material.color = Colors [1];
																																			BtnColor1 [j] = 1;
																																			BtnColor2 [j] = 1;
																																			Debug.Log ("[Game of Life #" + moduleId + "] Steady blue = White");
																																		} else {
																																			BtnColor [j].material.color = Colors [0];
																																			BtnColor1 [j] = 0;
																																			BtnColor2 [j] = 0;
																																			Debug.Log ("[Game of Life #" + moduleId + "] Steady blue = Black");
																																		}
																																	} else {
																																		if ((BtnColor1 [i] == 6 && BtnColor2 [i] == 7) || (BtnColor1 [i] == 7 && BtnColor2 [i] == 6)) {		// blue+purple
																																			//input rules
																																			if ((Info.IsPortPresent(KMBombInfoExtensions.KnownPortType.Serial) || Info.IsPortPresent(KMBombInfoExtensions.KnownPortType.PS2)) && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.SND)) {
																																				BtnColor [j].material.color = Colors [1];
																																				BtnColor1 [j] = 1;
																																				BtnColor2 [j] = 1;
																																				Debug.Log ("[Game of Life #" + moduleId + "] Flashing blue+purple = White");
																																			} else {
																																				BtnColor [j].material.color = Colors [0];
																																				BtnColor1 [j] = 0;
																																				BtnColor2 [j] = 0;
																																				Debug.Log ("[Game of Life #" + moduleId + "] Flashing blue+purple = Black");
																																			}
																																		} else {
																																			if ((BtnColor1 [i] == 6 && BtnColor2 [i] == 8) || (BtnColor1 [i] == 8 && BtnColor2 [i] == 6)) {		// blue+brown
																																				//input rules
																																				if (iiLast %2 == 0) {
																																					//brown rule
																																					if ((iiPortTypes > 2) && ((iiLit + iiUnlit) > 0)) {
																																						BtnColor [j].material.color = Colors [1];
																																						BtnColor1 [j] = 1;
																																						BtnColor2 [j] = 1;
																																						Debug.Log ("[Game of Life #" + moduleId + "] Flashing blue+brown = White (brown rule)");
																																					} else {
																																						BtnColor [j].material.color = Colors [0];
																																						BtnColor1 [j] = 0;
																																						BtnColor2 [j] = 0;
																																						Debug.Log ("[Game of Life #" + moduleId + "] Flashing blue+brown = Black (brown rule)");
																																					}
																																				} else {
																																					//other rule
																																					if ((Info.IsPortPresent(KMBombInfoExtensions.KnownPortType.Serial) || Info.IsPortPresent(KMBombInfoExtensions.KnownPortType.PS2)) && !Info.IsIndicatorPresent(KMBombInfoExtensions.KnownIndicatorLabel.SND)) {
																																						BtnColor [j].material.color = Colors [1];
																																						BtnColor1 [j] = 1;
																																						BtnColor2 [j] = 1;
																																						Debug.Log ("[Game of Life #" + moduleId + "] Flashing blue+brown = White (blue rule)");
																																					} else {
																																						BtnColor [j].material.color = Colors [0];
																																						BtnColor1 [j] = 0;
																																						BtnColor2 [j] = 0;
																																						Debug.Log ("[Game of Life #" + moduleId + "] Flashing blue+brown = Black (blue rule)");
																																					}
																																				}
																																			} else {



																																				if ((BtnColor1 [i] == 7 && BtnColor2 [i] == 7) || (BtnColor1 [i] == 7 && BtnColor2 [i] == 7)) {		// purple
																																					//input rules
																																					if ((iiLit > iiUnlit) && (iiBatteries < 4)) {
																																						BtnColor [j].material.color = Colors [1];
																																						BtnColor1 [j] = 1;
																																						BtnColor2 [j] = 1;
																																						Debug.Log ("[Game of Life #" + moduleId + "] Steady purple = White");
																																					} else {
																																						BtnColor [j].material.color = Colors [0];
																																						BtnColor1 [j] = 0;
																																						BtnColor2 [j] = 0;
																																						Debug.Log ("[Game of Life #" + moduleId + "] Steady purple = Black");
																																					}
																																				} else {
																																					if ((BtnColor1 [i] == 7 && BtnColor2 [i] == 8) || (BtnColor1 [i] == 8 && BtnColor2 [i] == 7)) {		// purple+brown
																																						//input rules
																																						if (iiLast %2 == 0) {
																																							//brown rule
																																							if ((iiPortTypes > 2) && ((iiLit + iiUnlit) > 0)) {
																																								BtnColor [j].material.color = Colors [1];
																																								BtnColor1 [j] = 1;
																																								BtnColor2 [j] = 1;
																																								Debug.Log ("[Game of Life #" + moduleId + "] Flashing purple+brown = White (brown rule)");
																																							} else {
																																								BtnColor [j].material.color = Colors [0];
																																								BtnColor1 [j] = 0;
																																								BtnColor2 [j] = 0;
																																								Debug.Log ("[Game of Life #" + moduleId + "] Flashing purple+brown = Black (brown rule)");
																																							}
																																						} else {
																																							//other rule
																																							if ((iiLit > iiUnlit) && (iiBatteries < 4)) {
																																								BtnColor [j].material.color = Colors [1];
																																								BtnColor1 [j] = 1;
																																								BtnColor2 [j] = 1;
																																								Debug.Log ("[Game of Life #" + moduleId + "] Flashing purple+brown = White (purple rule)");
																																							} else {
																																								BtnColor [j].material.color = Colors [0];
																																								BtnColor1 [j] = 0;
																																								BtnColor2 [j] = 0;
																																								Debug.Log ("[Game of Life #" + moduleId + "] Flashing purple+brown = Black (purple rule)");
																																							}
																																						}
																																					} else {



																																						if ((BtnColor1 [i] == 8 && BtnColor2 [i] == 8) || (BtnColor1 [i] == 8 && BtnColor2 [i] == 8)) {		// brown
																																							//input rules
																																							if ((iiPortTypes > 2) && ((iiLit + iiUnlit) > 0)) {
																																								BtnColor [j].material.color = Colors [1];
																																								BtnColor1 [j] = 1;
																																								BtnColor2 [j] = 1;
																																								Debug.Log ("[Game of Life #" + moduleId + "] Steady brown = White");
																																							} else {
																																								BtnColor [j].material.color = Colors [0];
																																								BtnColor1 [j] = 0;
																																								BtnColor2 [j] = 0;
																																								Debug.Log ("[Game of Life #" + moduleId + "] Steady brown = Black");
																																							}
																																						} 
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		yield return new WaitForSeconds (3);

			//do the generations, present visually
		for (int i = 0; i < Gen; i++) {
			//for every generation:
			//store BtnColor values
			for (int j = 0; j < 48; j++) {
				BtnColorStore [j] = BtnColor [j].material.color;
			}
			//process neighbors and set new value
			for (int k = 0; k < 48; k++) {
				int l = k;
				nCount [l] = 0;
				//top left
				if (k - 7 < 0) {
				} else {
					if (BtnColorStore [(k - 7)].Equals(Colors[1])) {
						nCount [l]++;
					}
				}
				//top
				if (k - 6 < 0) {
				} else {
					if (BtnColorStore [(k - 6)].Equals(Colors[1])) {
						nCount [l]++;
					}
				}
				//top right
				if (k - 5 < 0) {
				} else {
					if (BtnColorStore [(k - 5)].Equals(Colors[1])) {
						nCount [l]++;
					}
				}
				//left
				if (k - 1 < 0) {
				} else {
					if (BtnColorStore [(k - 1)].Equals(Colors[1])) {
						nCount [l]++;
					}
				}
				//right
				if (k + 1 > 47) {
				} else {
					if (BtnColorStore [(k + 1)].Equals(Colors[1])) {
						nCount [l]++;
					}
				}
				//bottom left
				if (k + 5 > 47) {
				} else {
					if (BtnColorStore [(k + 5)].Equals(Colors[1])) {
						nCount [l]++;
					}
				}
				//bottom
				if (k + 6 > 47) {
				} else {
					if (BtnColorStore [(k + 6)].Equals(Colors[1])) {
						nCount [l]++;
					}
				}
				//bottom right
				if (k + 7 > 47) {
				} else {
					if (BtnColorStore [(k + 7)].Equals(Colors[1])) {
						nCount [l]++;
					}
				}
				//read nCount and decide result
				Debug.Log ("Square " + k + " has nCount: " + nCount[k]);
				//if square is white
				if (BtnColor [k].material.color == Colors [1]) {
					if (nCount [k] < 2 || nCount [k] > 3) {
						BtnColor [k].material.color = Colors [0]; 
					}
				} else {
					//if square is black
					if (nCount [k] == 3) {
						BtnColor [k].material.color = Colors [1];  
					}
				}
				Debug.Log ("Square " + k + " gets color: " + BtnColor [k].material.color);
			}

			if (i < (Gen - 1)) {
				yield return new WaitForSeconds (TimeSuspend);
			}
			Debug.Log ("Generation " + i + " done!");
			//returns to process next generation
		}
		//test last generation against ColorsSubmitted
		for (int i = 0; i < 48; i++) {
			if (isSubmitting == true){
				//is any square wrongly submitted, then strike
				if (BtnColor [i].material.color != ColorsSubmitted [i]) {
					Debug.Log ("[Game of Life #" + moduleId + "] Submit pressed. First error found at square number " + (i + 1) + " in reading order");
					Module.HandleStrike ();
					yield return new WaitForSeconds (TimeSneak);
					isSubmitting = false;
					handleReset ();
				}
			}
		}
		//solve!
		if (isSubmitting == true) {
			Debug.Log ("[Game of Life #" + moduleId + "] Submit pressed. No errors found! Module passed");
			Module.HandlePass ();
			isSolved = true;
		}
	}


	// Reset is pressed, reset Btns to initial state
	void handleReset () {

		if (!isActive || isSolved || isSubmitting)
			return;
		else {
			for (int i = 0; i < 48; i++) {
				BtnColor1 [i] = BtnColor1init [i];
				BtnColor2 [i] = BtnColor2init [i];
			}
		}
	}


	// Square[num] is pressed, toggle colors
	void handleSquare (int num) {

		Audio.PlayGameSoundAtTransform (KMSoundOverride.SoundEffect.ButtonPress, Btn[num].transform);

		if (!isActive || isSolved || isSubmitting)
			return;
		else {
			if (BtnColor [num].material.color == Colors [0]) {
				BtnColor [num].material.color = Colors [1];
				BtnColor1 [num] = 1;
				BtnColor2 [num] = 1;
			} else {
				BtnColor [num].material.color = Colors [0];
				BtnColor1 [num] = 0;
				BtnColor2 [num] = 0;
			}
		}
	}
}